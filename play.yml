---
 - name: Setup Server
   hosts: all
   become: yes
   become_user: root

   tasks:
     - name: Update "apt"
       apt:
         update_cache: yes
         cache_valid_time: 3600
         upgrade: yes
         autoremove: yes

     - name: Install Packages(git, apache2 unzip, curl)
       apt:
         pkg:
         - php8.1-cli
         - php8.1-common
         - php-xml
         - php-pgsql
         - libapache2-mod-php
         - apache2
         - git
         - unzip
         - curl
         - php8.1-curl
         - php8.1-mbstring
         - php8.1-xml
         - php8.1-zip
         - php8.1-mysql
         - php8.1-bcmath
         state: present
         update_cache: yes

     - name: Install Software properties
       command: apt install software-properties-common


     - name: Update "apt"
       apt:
         update_cache: yes
         autoclean: yes


     - name: Install PHP Modules
       apt:
         pkg:
         - php8.1-cli
         - php-xml
         - php-pgsql
         - libapache2-mod-php
         - apache2
         - git
         - unzip
         - curl
         - php8.1-curl
         - php8.1-mbstring
         - php8.1-zip
         - php8.1-xml
         - php8.1-pgsql

 # Firewall Settings 
     - name: Enable UFW
       community.general.ufw:
         state: enabled
         policy: allow
         direction: incoming
         logging: yes

 # Database Settings
     - name: Update "apt"
       apt:
         update_cache: yes
         autoclean: yes
         autoremove: yes

     - name: Install python-setuptools
       package:
         name: python3-setuptools
         state: present

     - name: Install Python3
       apt:
         name: python3
         state: latest

     - name: Install Pip
       apt:
         name: python3-pip
         update_cache: yes
         state: present

     - name: Install MySQL server
       apt:
         name: mysql-server
         state: latest

     - name: Install MySQL client
       apt:
         name: mysql-client
         state: latest

     - name: Install PyMySQL Library
       pip:
         name: pymysql
         state: latest

     - name: Start the MySQL service
       service:
         name: mysql
         state: started
         enabled: yes

     - name: Set MySQL root password
       mysql_user:
         name: root
         password: "password"
         login_user: root
         login_unix_socket: /var/run/mysqld/mysqld.sock
       when: mysql_root_password is defined and mycnf.stat.exists == true

     - name: Change the working directory to /var/www/ and create laravel directory
       command: mkdir Laravel
       args:
         chdir: /var/www/
         creates: /var/www/Laravel

     - name: Clone the project Repository into a new directory
       git:
         repo: https://github.com/f1amy/laravel-realworld-example-app.git
         dest: /var/www/Laravel
         clone: yes
         update: no

     - name: Create the web.php file in the routes directory
       ansible.builtin.copy:
         dest: /var/www/Laravel/routes/web.php
         content: |
           <?php

           Route::get('/', function () {
               return view('welcome');
           });

     - name: Create an Apache virtual host configuration file
       ansible.builtin.copy:
         dest: /var/www/Laravel/.env
         content: |
           APP_NAME=Laravel
           APP_ENV=local
           APP_KEY=
           APP_DEBUG=true
           APP_URL=stevocoded.me
           APP_PORT=3000

           LOG_CHANNEL=stack
           LOG_DEPRECATIONS_CHANNEL=null
           LOG_LEVEL=debug

           DB_CONNECTION=mysql
           DB_HOST=localhost
           DB_PORT=3306
           DB_DATABASE=database
           DB_USERNAME=stevocoded
           DB_PASSWORD="root"

           BROADCAST_DRIVER=log
           CACHE_DRIVER=file
           FILESYSTEM_DISK=local
           QUEUE_CONNECTION=sync
           SESSION_DRIVER=file
           SESSION_LIFETIME=120

           MEMCACHED_HOST=127.0.0.1

           REDIS_HOST=127.0.0.1
           REDIS_PASSWORD=null
           REDIS_PORT=6379

           MAIL_MAILER=smtp
           MAIL_HOST=mailhog
           MAIL_PORT=1025
           MAIL_USERNAME=null
           MAIL_PASSWORD=null
           MAIL_ENCRYPTION=null
           MAIL_FROM_ADDRESS="hello@example.com"
           MAIL_FROM_NAME="${APP_NAME}"

           AWS_ACCESS_KEY_ID=
           AWS_SECRET_ACCESS_KEY=
           AWS_DEFAULT_REGION=us-east-1
           AWS_BUCKET=
           AWS_USE_PATH_STYLE_ENDPOINT=false

           PUSHER_APP_ID=
           PUSHER_APP_KEY=
           PUSHER_APP_SECRET=
           PUSHER_APP_CLUSTER=mt1

           MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
           MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

           L5_SWAGGER_GENERATE_ALWAYS=true
           SAIL_XDEBUG_MODE=develop,debug
           SAIL_SKIP_CHECKS=true

     - name: .htaccess file
       ansible.builtin.copy:
         dest: "/var/www/Laravel/.htaccess"
         content: |
          <IfModule mod_rewrite.c>
            RewriteEngine On
            RewriteCond %{REQUEST_URI} !^/public/
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteRule ^(.*)$ /public/$1
            RewriteRule ^(/)?$ public/index.php [L]
          </IfModule>

            # Set the APP_KEY
     - name: Download Composer Installer
       command: curl -sS https://getcomposer.org/installer -o composer-setup.php

     - name: Verify Installation Script is Safe to Run
       command: php -r "if (hash_file('SHA384', '/tmp/composer-setup.php') === '$HASH')   { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('/tmp/composer-setup.php'); } echo PHP_EOL;"

     - name: Install Composer Globally
       command: sudo php /tmp/ composer-setup.php --install-dir=/usr/local/bin --filename=composer

     - name: Make composer executable by user
       file:
         path: /usr/local/bin/composer
         mode: '0755'

     - name: Download and install all requirements outlined in the /var/www/Laravel/composer.lock file
       shell: composer install --no-interaction --no-dev --prefer-dist
       args:
         chdir: /var/www/Laravel


     - name: Run the php artisan .... command
       ansible.builtin.shell: php artisan key:generate
       args:
         chdir: /var/www/Laravel

     - name: Run the php artisan .... cache
       ansible.builtin.shell: php artisan config:clear
       args:
         chdir: /var/www/Laravel

     - name: Run the php artisan .... migrate
       ansible.builtin.shell: php artisan migrate
       args:
         chdir: /var/www/Laravel

     - name: Create an apache virtual host configuration file
       ansible.builtin.copy:
         dest: /etc/apache2/sites-available/Laravel.conf
         content: |
           <VirtualHost *:80>
               ServerAdmin admin@stevocoded.me
               ServerName stevocoded.me
               ServerAlias www.stevocoded.me
               DocumentRoot /var/www/Laravel/public

               <Directory /var/www/Laravel/public>
                   AllowOverride All
               </Directory>

               ErrorLog ${APACHE_LOG_DIR}/error.log
               CustomLog ${APACHE_LOG_DIR}/access.log combined
           </VirtualHost>

     - name: Enable a2enmod rewrite
       ansible.builtin.command: a2enmod rewrite

     - name: Disable default apache page and enable laravel page
       ansible.builtin.command: a2dissite 000-default.conf

     - name: Enable laravel page
       ansible.builtin.command: a2ensite Laravel.conf

     - name: Change file ownership, group and permissions
       ansible.builtin.file:
         path: /var/www/Laravel
         state: directory
         recurse: yes
         owner: www-data
         group: www-data
         mode: '0755'

     - name: Restart Apache
       ansible.builtin.command: service apache2 restart

